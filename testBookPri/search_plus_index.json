{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction kdkslfjk我爱你 powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第一章/":{"url":"第一章/","title":"第一章","keywords":"","body":"Easy 范德萨范德萨 Cd powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第一章/Git安装配置.html":{"url":"第一章/Git安装配置.html","title":"Git安装配置","keywords":"","body":"powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第一章/大张旗鼓.html":{"url":"第一章/大张旗鼓.html","title":"大张旗鼓","keywords":"","body":"Cc 幅度萨芬就拉山口 反对萨德v 反对 powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第一章/天女散花.html":{"url":"第一章/天女散花.html","title":"天女散花","keywords":"","body":"1.Two Sum f 大蛇的稳住我们烦烦烦弄影 说法都是111 powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第一章/得不扰人.html":{"url":"第一章/得不扰人.html","title":"得不扰人","keywords":"","body":"Cc 成都 顶顶顶大大大 powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第一章/百折不挠.html":{"url":"第一章/百折不挠.html","title":"百折不挠","keywords":"","body":"7.Reverse Integer 犯得上反对 都34234 powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第二章/":{"url":"第二章/","title":"第二章","keywords":"","body":"Medium powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第二章/2.AddTwoNumbers.html":{"url":"第二章/2.AddTwoNumbers.html","title":"2.AddTwoNumbers","keywords":"","body":"2.Add Two Numbers ninfdksfnldsk dddd powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第二章/3.Longes20SubstringWithoutRepeatingCharacters.html":{"url":"第二章/3.Longes20SubstringWithoutRepeatingCharacters.html","title":"3.Longes20SubstringWithoutRepeatingCharacters","keywords":"","body":"3.Longest Substring Without Repeating Characters fdsfds powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "},"第二章/数组简介.html":{"url":"第二章/数组简介.html","title":"数组简介","keywords":"","body":"数组简介 [TOC] 来源：力扣数组和字符串书籍：https://leetcode-cn.com/leetbook/detail/array-and-string/ 集合、列表和数组 集合​​ 集合一般被定义为：由一个或多个确定的元素所构成的整体。通俗来讲，集合就是将一组事物组合在一起。 集合特性： 集合里的元素类型不一定相同 集合里的元素没有顺序 列表 列表（又称线性列表）的定义为：是一种数据项构成的有限序列，即按照一定的线性顺序，排列而成的数据项的集合。 列表常见的表现形式有数组和链表。 列表特性： 具有顺序 长度可变 数组 数组：具有列表的特征，与列表不同的是，数组有索引。 数组会用一些名为索引的数字来标识每项数据在数组中的位置，且在大多编程语言中，索引是从 0 算起的。我们可以根据数组中的索引，快速访问数组中的元素。 特点： 内存中连续存储 数组的操作（ 4 种） 读取元素 读取数组中的元素，是通过索引的方式来读取的，索引一般从 0 开始。 在计算机中，内存可以看作一些已经排列好的格子，每个格子对应一个内存地址。一般情况下，数据会分散地存储在不同的格子中。 而对于数组，计算机会在内存中为其申请一段连续的内存空间，并会记下索引为 0 处的内存地址。以数组 [\"C\",\"0\",\"D\",\"E\",\"R\"] 为例，它的各元素对应的索引及内存地址如下图所示。 假设我们想要访问为 2 处的元素 D 时，计算机会进行以下计算： 找到该数组的索引 0 的内存地址： 2008 ； 将内存地址加上索引值，作为目标元素的地址，即 2008 + 2 = 2010，对应的元素 \"D\"，这时边便找到了目标元素。 我们知道，计算内存地址这个过程是很快的，而我们一旦知道了内存地址就可以立即访问到该元素，因此它的时间复杂度是常数级别，为$O（1）$。 查找元素 假如我们对数组中包含哪些元素并不了解，只是想知道其中是否含有元素 \"E\"，数组会如何查找元素 \"E\" 呢？ 与读取元素类似，由于我们只保存了索引为 0 处的内存地址，因此在查找元素时，只需从数组开头逐步向后查找就可以了。如果数组中的某个元素为目标元素，则停止查找；否则继续搜索直到到达数组的末尾。 插入元素 假如我们想在原有的数组中再插入一个元素 \"S\" 呢？ 如果要将该元素插入到数组的末尾，只需要一步。即计算机通过数组的长度和位置计算出即将插入元素的内存地址，然后将该元素插入到指定位置即可。 然而，如果要将该元素插入到数组中的其他位置，则会有所区别，这时我们首先需要为该元素所要插入的位置 腾出 空间，然后进行插入操作。比如，我们想要在索引 2 处插入 \"S\"。 删除元素 删除元素与插入元素的操作类似，当我们删除掉数组中的某个元素后，数组中会留下 空缺 的位置，而数组中的元素在内存中是连续的，这就使得后面的元素需对该位置进行 填补 操作。 以删除索引 1 中的元素 \"O\" 为例，具体过程如图所示。 当数组的长度为 n 时，最坏情况下，我们删除第一个元素，共需要的步骤数为 1 + (n - 1) = n 步，其中，1 为删除操作，n - 1 为移动其余元素的步骤数。删除操作具有线性时间复杂度，即时间复杂度为 $O(N)$，$N$ 为数组的长度。 寻找数组的中心索引 给你一个整数数组 nums，请编写一个能够返回数组 “中心下标” 的方法。 数组 中心下标 是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。 如果数组不存在中心下标，返回 -1 。如果数组有多个中心下标，应该返回最靠近左边的那一个。 注意：中心下标可能出现在数组的两端。 示例 1 ： 输入：nums = [1, 7, 3, 6, 5, 6] : 输出：3 解释：中心下标是 3 。 左侧数之和 (1 + 7 + 3 = 11)， 右侧数之和 (5 + 6 = 11) ，二者相等。 示例 2： 输入：nums = [1, 2, 3] 输出：-1 解释： 数组中不存在满足此条件的中心下标。 示例 3 ： 输入：nums = [2, 1, -1] 输出：0 解释： 中心下标是 0 。 下标 0 左侧不存在元素，视作和为 0 ； 右侧数之和为 1 + (-1) = 0 ，二者相等 提示： nums 的长度范围为 [0, 10000]。 任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。 自己的想法：:wind_chime::waning_crescent_moon: 计算出数据元素和 sum 循环遍历，sum 减去当前元素值 num[i] ,判断 leftSum 是否等于 sum，相等返回数组下标 $i$ ，不等 leftSum 加上当前元素值 num[i] 代码实现： public class FindCentralIndex { public int pivotIndex(int[] nums) { int sum = 0; int leftSum = 0; for(int i = 0;i powered by Gitbook该文件最后修改时间： 2022-06-05 14:43:12 "}}